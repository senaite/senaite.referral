<?xml version="1.0"?>
<dc-workflow xmlns:i18n="http://xml.zope.org/namespaces/i18n"
             workflow_id="senaite_inbound_shipment_workflow"
             title="Senaite Referral's inbound sample shipment Workflow"
             description=""
             state_variable="review_state"
             initial_state="due"
             manager_bypass="False"
             i18n:domain="senaite.referral">

  <!--
  Workflow for InboundSampleShipment objects
  -->

  <!-- PERMISSIONS -->
  <!-- Plone generic permissions -->
  <permission>Access contents information</permission>
  <permission>Add portal content</permission>
  <permission>Delete objects</permission>
  <permission>List folder contents</permission>
  <permission>Modify portal content</permission>
  <permission>View</permission>

  <!-- State: due -->
  <state state_id="due" title="Due" i18n:attributes="title">
    <exit-transition transition_id="receive_inbound_samples" />
    <exit-transition transition_id="receive_inbound_shipment" />
    <exit-transition transition_id="reject_inbound_shipment" />

    <!-- Plone's permissions -->
    <permission-map name="Access contents information" acquired="True" />
    <permission-map name="Add portal content" acquired="True" />
    <permission-map name="Delete objects" acquired="True" />
    <permission-map name="List folder contents" acquired="True" />
    <permission-map name="Modify portal content" acquired="True" />
    <permission-map name="View" acquired="True" />
  </state>

  <!-- State: received -->
  <state state_id="received" title="Received" i18n:attributes="title">
    <exit-transition transition_id="reject_inbound_shipment" />

    <!-- Plone's permissions -->
    <permission-map name="Access contents information" acquired="True" />
    <permission-map name="Add portal content" acquired="False" />
    <permission-map name="Delete objects" acquired="False" />
    <permission-map name="List folder contents" acquired="True" />
    <permission-map name="Modify portal content" acquired="True" />
    <permission-map name="View" acquired="True" />
  </state>

  <!-- State: rejected -->
  <state state_id="rejected" title="Rejected" i18n:attributes="title">
    <exit-transition transition_id="" />

    <!-- Plone's permissions -->
    <permission-map name="Access contents information" acquired="True" />
    <permission-map name="Add portal content" acquired="False" />
    <permission-map name="Delete objects" acquired="False" />
    <permission-map name="List folder contents" acquired="True" />
    <permission-map name="Modify portal content" acquired="False" />
    <permission-map name="View" acquired="True" />
  </state>

  <!-- Transition: receive_inbound_samples
  This transition is only used as a shortcut for the reception of all
  inbound samples the shipment contains. Since the samples might be received
  by a queue task, we do not want the shipment to transition to received
  unless all inbound samples have been received already. This transition is
  only visible when there is at least one inbound sample that has not been
  received yet
  -->
  <transition transition_id="receive_inbound_samples" title="Receive" new_state="due" trigger="USER" before_script="" after_script="" i18n:attributes="title">
    <action url="" category="workflow" icon="">Receive</action>
    <guard>
      <guard-expression>python:here.guard_handler("receive_inbound_samples")</guard-expression>
    </guard>
  </transition>

  <!-- Transition: receive_inbound_shipment
  This transition transitions the whole shipment to received status, but
  has nothing to do with the inbound samples the shipment contains. This
  transition is only visible when all inbound samples have been received.
  -->
  <transition transition_id="receive_inbound_shipment" title="Receive" new_state="received" trigger="USER" before_script="" after_script="" i18n:attributes="title">
    <action url="" category="workflow" icon="">Receive</action>
    <guard>
      <guard-expression>python:here.guard_handler("receive_inbound_shipment")</guard-expression>
    </guard>
  </transition>

  <!-- Transition: reject_inbound_shipment -->
  <transition transition_id="reject_inbound_shipment" title="Reject" new_state="rejected" trigger="USER" before_script="" after_script="" i18n:attributes="title">
    <action url="" category="workflow" icon="">Reject</action>
    <guard>
      <guard-expression>python:here.guard_handler("reject_inbound_shipment")</guard-expression>
    </guard>
  </transition>

  <variable variable_id="action" for_catalog="False" for_status="True" update_always="True">
    <description>Previous transition</description>
    <default>
      <expression>transition/getId|nothing</expression>
    </default>
    <guard>
    </guard>
  </variable>

  <variable variable_id="actor" for_catalog="False" for_status="True" update_always="True">
    <description>The ID of the user who performed the last transition</description>
    <default>
      <expression>user/getId</expression>
    </default>
    <guard>
    </guard>
  </variable>

  <variable variable_id="comments" for_catalog="False" for_status="True" update_always="True">
    <description>Comment about the last transition</description>
    <default>
      <expression>python:state_change.kwargs.get('comment', '')</expression>
    </default>
    <guard>
    </guard>
  </variable>

  <variable variable_id="review_history" for_catalog="False" for_status="False" update_always="False">
    <description>Provides access to workflow history</description>
    <default>
      <expression>state_change/getHistory</expression>
    </default>
    <guard>
    </guard>
  </variable>

  <variable variable_id="time" for_catalog="False" for_status="True" update_always="True">
    <description>When the previous transition was performed</description>
    <default>
      <expression>state_change/getDateTime</expression>
    </default>
    <guard>
    </guard>
  </variable>

</dc-workflow>
